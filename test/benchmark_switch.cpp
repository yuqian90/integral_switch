/*
 * benchmark_switch.cpp
 * Copyright (C) 2019  Qian Yu
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include <benchmark/benchmark.h>
#include <utility>
#include <vector>

#include "benchmark_switch.h"
#include "integral_switch.h"

namespace integral_switch {

template <std::size_t I> using size_constant = std::integral_constant<std::size_t, I>;

template <std::size_t... Is> std::vector<size_t> make_ids(detail::index_sequence<Is...>) {
    std::vector<std::size_t> vs;

    for (std::size_t i = 0; i < 5000 / sizeof...(Is); ++i) {
        int dummy[] = {(vs.push_back(Is), 0)...};
        (void)dummy;
    }

    return vs;
}

struct Visitor1 {
    template <std::size_t I> constexpr std::size_t operator()(size_constant<I>) const { return I; }
};

template <typename> struct MakeSwitch;

template <std::size_t... Is> struct MakeSwitch<detail::index_sequence<Is...>> {
    using type = integral_switch<std::size_t, Is...>;
};

template <std::size_t N> static void integral_switch_visit_nothrow(benchmark::State &state) {
    using Seq = detail::make_index_sequence<N>;

    auto ids = make_ids(Seq{});

    Visitor1 visitor1;

    for (auto _ : state) {
        std::size_t sum = 0;
        using Switch = typename MakeSwitch<Seq>::type;

        for (const auto i : ids) {
            sum += Switch::visit_nothrow(visitor1, i, 0);
        }
        benchmark::DoNotOptimize(sum);
    }
}

template <std::size_t N> static void switch_case_visit_nothrow(benchmark::State &state) {
    using Seq = detail::make_index_sequence<N>;

    auto ids = make_ids(Seq{});

    for (auto _ : state) {
        std::size_t sum = 0;

        for (const auto i : ids) {
            sum += switch_case_get<N>(i);
        }
        benchmark::DoNotOptimize(sum);
    }
}

#define BENCHMARK_INTEGRAL_SWITCH(N)                                                               \
    BENCHMARK_TEMPLATE(integral_switch_visit_nothrow, N);                                          \
    BENCHMARK_TEMPLATE(switch_case_visit_nothrow, N);

BENCHMARK_INTEGRAL_SWITCH(3);
BENCHMARK_INTEGRAL_SWITCH(4);
BENCHMARK_INTEGRAL_SWITCH(5);
BENCHMARK_INTEGRAL_SWITCH(6);
BENCHMARK_INTEGRAL_SWITCH(7);
BENCHMARK_INTEGRAL_SWITCH(8);
BENCHMARK_INTEGRAL_SWITCH(9);
BENCHMARK_INTEGRAL_SWITCH(10);
BENCHMARK_INTEGRAL_SWITCH(11);
BENCHMARK_INTEGRAL_SWITCH(12);
BENCHMARK_INTEGRAL_SWITCH(13);
BENCHMARK_INTEGRAL_SWITCH(14);
BENCHMARK_INTEGRAL_SWITCH(15);
BENCHMARK_INTEGRAL_SWITCH(16);
BENCHMARK_INTEGRAL_SWITCH(17);
BENCHMARK_INTEGRAL_SWITCH(18);
BENCHMARK_INTEGRAL_SWITCH(19);
BENCHMARK_INTEGRAL_SWITCH(20);
BENCHMARK_INTEGRAL_SWITCH(21);
BENCHMARK_INTEGRAL_SWITCH(22);
BENCHMARK_INTEGRAL_SWITCH(23);
BENCHMARK_INTEGRAL_SWITCH(24);
BENCHMARK_INTEGRAL_SWITCH(25);
BENCHMARK_INTEGRAL_SWITCH(26);
BENCHMARK_INTEGRAL_SWITCH(27);
BENCHMARK_INTEGRAL_SWITCH(28);
BENCHMARK_INTEGRAL_SWITCH(29);
BENCHMARK_INTEGRAL_SWITCH(30);
BENCHMARK_INTEGRAL_SWITCH(31);
BENCHMARK_INTEGRAL_SWITCH(32);
BENCHMARK_INTEGRAL_SWITCH(33);
BENCHMARK_INTEGRAL_SWITCH(34);
BENCHMARK_INTEGRAL_SWITCH(35);
BENCHMARK_INTEGRAL_SWITCH(36);
BENCHMARK_INTEGRAL_SWITCH(37);
BENCHMARK_INTEGRAL_SWITCH(38);
BENCHMARK_INTEGRAL_SWITCH(39);
BENCHMARK_INTEGRAL_SWITCH(40);
BENCHMARK_INTEGRAL_SWITCH(41);
BENCHMARK_INTEGRAL_SWITCH(42);
BENCHMARK_INTEGRAL_SWITCH(43);
BENCHMARK_INTEGRAL_SWITCH(44);
BENCHMARK_INTEGRAL_SWITCH(45);
BENCHMARK_INTEGRAL_SWITCH(46);
BENCHMARK_INTEGRAL_SWITCH(47);
BENCHMARK_INTEGRAL_SWITCH(48);
BENCHMARK_INTEGRAL_SWITCH(49);
BENCHMARK_INTEGRAL_SWITCH(50);
BENCHMARK_INTEGRAL_SWITCH(51);
BENCHMARK_INTEGRAL_SWITCH(52);
BENCHMARK_INTEGRAL_SWITCH(53);
BENCHMARK_INTEGRAL_SWITCH(54);
BENCHMARK_INTEGRAL_SWITCH(55);
BENCHMARK_INTEGRAL_SWITCH(56);
BENCHMARK_INTEGRAL_SWITCH(57);
BENCHMARK_INTEGRAL_SWITCH(58);
BENCHMARK_INTEGRAL_SWITCH(59);
BENCHMARK_INTEGRAL_SWITCH(60);
BENCHMARK_INTEGRAL_SWITCH(61);
BENCHMARK_INTEGRAL_SWITCH(62);
BENCHMARK_INTEGRAL_SWITCH(63);
BENCHMARK_INTEGRAL_SWITCH(64);
BENCHMARK_INTEGRAL_SWITCH(65);
BENCHMARK_INTEGRAL_SWITCH(66);
BENCHMARK_INTEGRAL_SWITCH(67);
BENCHMARK_INTEGRAL_SWITCH(68);
BENCHMARK_INTEGRAL_SWITCH(69);
BENCHMARK_INTEGRAL_SWITCH(70);
BENCHMARK_INTEGRAL_SWITCH(71);
BENCHMARK_INTEGRAL_SWITCH(72);
BENCHMARK_INTEGRAL_SWITCH(73);
BENCHMARK_INTEGRAL_SWITCH(74);
BENCHMARK_INTEGRAL_SWITCH(75);
BENCHMARK_INTEGRAL_SWITCH(76);
BENCHMARK_INTEGRAL_SWITCH(77);
BENCHMARK_INTEGRAL_SWITCH(78);
BENCHMARK_INTEGRAL_SWITCH(79);
BENCHMARK_INTEGRAL_SWITCH(80);
BENCHMARK_INTEGRAL_SWITCH(81);
BENCHMARK_INTEGRAL_SWITCH(82);
BENCHMARK_INTEGRAL_SWITCH(83);
BENCHMARK_INTEGRAL_SWITCH(84);
BENCHMARK_INTEGRAL_SWITCH(85);
BENCHMARK_INTEGRAL_SWITCH(86);
BENCHMARK_INTEGRAL_SWITCH(87);
BENCHMARK_INTEGRAL_SWITCH(88);
BENCHMARK_INTEGRAL_SWITCH(89);
BENCHMARK_INTEGRAL_SWITCH(90);
BENCHMARK_INTEGRAL_SWITCH(91);
BENCHMARK_INTEGRAL_SWITCH(92);
BENCHMARK_INTEGRAL_SWITCH(93);
BENCHMARK_INTEGRAL_SWITCH(94);
BENCHMARK_INTEGRAL_SWITCH(95);
BENCHMARK_INTEGRAL_SWITCH(96);
BENCHMARK_INTEGRAL_SWITCH(97);
BENCHMARK_INTEGRAL_SWITCH(98);
BENCHMARK_INTEGRAL_SWITCH(99);
BENCHMARK_INTEGRAL_SWITCH(100);
BENCHMARK_INTEGRAL_SWITCH(101);
BENCHMARK_INTEGRAL_SWITCH(102);
BENCHMARK_INTEGRAL_SWITCH(103);
BENCHMARK_INTEGRAL_SWITCH(104);
BENCHMARK_INTEGRAL_SWITCH(105);
BENCHMARK_INTEGRAL_SWITCH(106);
BENCHMARK_INTEGRAL_SWITCH(107);
BENCHMARK_INTEGRAL_SWITCH(108);
BENCHMARK_INTEGRAL_SWITCH(109);
BENCHMARK_INTEGRAL_SWITCH(110);
BENCHMARK_INTEGRAL_SWITCH(111);
BENCHMARK_INTEGRAL_SWITCH(112);
BENCHMARK_INTEGRAL_SWITCH(113);
BENCHMARK_INTEGRAL_SWITCH(114);
BENCHMARK_INTEGRAL_SWITCH(115);
BENCHMARK_INTEGRAL_SWITCH(116);
BENCHMARK_INTEGRAL_SWITCH(117);
BENCHMARK_INTEGRAL_SWITCH(118);
BENCHMARK_INTEGRAL_SWITCH(119);
BENCHMARK_INTEGRAL_SWITCH(120);
BENCHMARK_INTEGRAL_SWITCH(121);
BENCHMARK_INTEGRAL_SWITCH(122);
BENCHMARK_INTEGRAL_SWITCH(123);
BENCHMARK_INTEGRAL_SWITCH(124);
BENCHMARK_INTEGRAL_SWITCH(125);
BENCHMARK_INTEGRAL_SWITCH(126);
BENCHMARK_INTEGRAL_SWITCH(127);
BENCHMARK_INTEGRAL_SWITCH(128);
BENCHMARK_INTEGRAL_SWITCH(129);
BENCHMARK_INTEGRAL_SWITCH(130);
BENCHMARK_INTEGRAL_SWITCH(131);
BENCHMARK_INTEGRAL_SWITCH(132);

#undef BENCHMARK_INTEGRAL_SWITCH

} // namespace integral_switch
